declare module 'process' {
    import * as tty from 'node:tty';
    import { Worker } from 'node:worker_threads';
    global {
        var process: NodeJS.Process;
        namespace NodeJS {
            // this namespace merge is here because these are specifically used
            // as the type for process.stdin, process.stdout, and process.stderr.
            // they can't live in tty.d.ts because we need to disambiguate the imported name.
            interface ReadStream extends tty.ReadStream {}
            interface WriteStream extends tty.WriteStream {}
            interface MemoryUsageFn {
                /**
                 * The `process.memoryUsage()` method iterate over each page to gather informations about memory
                 * usage which can be slow depending on the program memory allocations.
                 */
                (): MemoryUsage;
                /**
                 * method returns an integer representing the Resident Set Size (RSS) in bytes.
                 */
                rss(): number;
            }
            interface MemoryUsage {
                rss: number;
                heapTotal: number;
                heapUsed: number;
                external: number;
                arrayBuffers: number;
            }
            interface CpuUsage {
                user: number;
                system: number;
            }
            interface ProcessRelease {
                name: string;
                sourceUrl?: string | undefined;
                headersUrl?: string | undefined;
                libUrl?: string | undefined;
                lts?: string | undefined;
            }
            interface ProcessVersions extends Dict<string> {
                http_parser: string;
                node: string;
                v8: string;
                ares: string;
                uv: string;
                zlib: string;
                modules: string;
                openssl: string;
            }
            type Platform = 'aix' | 'android' | 'darwin' | 'freebsd' | 'haiku' | 'linux' | 'openbsd' | 'sunos' | 'win32' | 'cygwin' | 'netbsd';
            type Architecture = 'arm' | 'arm64' | 'ia32' | 'mips' | 'mipsel' | 'ppc' | 'ppc64' | 's390' | 's390x' | 'x64';
            type Signals =
                | 'SIGABRT'
                | 'SIGALRM'
                | 'SIGBUS'
                | 'SIGCHLD'
                | 'SIGCONT'
                | 'SIGFPE'
                | 'SIGHUP'
                | 'SIGILL'
                | 'SIGINT'
                | 'SIGIO'
                | 'SIGIOT'
                | 'SIGKILL'
                | 'SIGPIPE'
                | 'SIGPOLL'
                | 'SIGPROF'
                | 'SIGPWR'
                | 'SIGQUIT'
                | 'SIGSEGV'
                | 'SIGSTKFLT'
                | 'SIGSTOP'
                | 'SIGSYS'
                | 'SIGTERM'
                | 'SIGTRAP'
                | 'SIGTSTP'
                | 'SIGTTIN'
                | 'SIGTTOU'
                | 'SIGUNUSED'
                | 'SIGURG'
                | 'SIGUSR1'
                | 'SIGUSR2'
                | 'SIGVTALRM'
                | 'SIGWINCH'
                | 'SIGXCPU'
                | 'SIGXFSZ'
                | 'SIGBREAK'
                | 'SIGLOST'
                | 'SIGINFO';
            type UncaughtExceptionOrigin = 'uncaughtException' | 'unhandledRejection';
            type MultipleResolveType = 'resolve' | 'reject';
            type BeforeExitListener = (code: number) => void;
            type DisconnectListener = () => void;
            type ExitListener = (code: number) => void;
            type RejectionHandledListener = (promise: Promise<unknown>) => void;
            type UncaughtExceptionListener = (error: Error, origin: UncaughtExceptionOrigin) => void;
            /**
             * Most of the time the unhandledRejection will be an Error, but this should not be relied upon
             * as *anything* can be thrown/rejected, it is therefore unsafe to assume that the value is an Error.
             */
            type UnhandledRejectionListener = (reason: unknown, promise: Promise<unknown>) => void;
            type WarningListener = (warning: Error) => void;
            type MessageListener = (message: unknown, sendHandle: unknown) => void;
            type SignalsListener = (signal: Signals) => void;
            type MultipleResolveListener = (type: MultipleResolveType, promise: Promise<unknown>, value: unknown) => void;
            type WorkerListener = (worker: Worker) => void;
            interface Socket extends ReadWriteStream {
                isTTY?: true | undefined;
            }
            // Alias for compatibility
            interface ProcessEnv extends Dict<string> {
                /**
                 * Can be used to change the default timezone at runtime
                 */
                TZ?: string;
            }
            interface HRTime {
                (time?: [number, number]): [number, number];
                bigint(): bigint;
            }
            interface ProcessReport {
                /**
                 * Directory where the report is written.
                 * working directory of the Node.js process.
                 * @default '' indicating that reports are written to the current
                 */
                directory: string;
                /**
                 * Filename where the report is written.
                 * The default value is the empty string.
                 * @default '' the output filename will be comprised of a timestamp,
                 * PID, and sequence number.
                 */
                filename: string;
                /**
                 * Returns a JSON-formatted diagnostic report for the running process.
                 * The report's JavaScript stack trace is taken from err, if present.
                 */
                getReport(err?: Error): string;
                /**
                 * If true, a diagnostic report is generated on fatal errors,
                 * such as out of memory errors or failed C++ assertions.
                 * @default false
                 */
                reportOnFatalError: boolean;
                /**
                 * If true, a diagnostic report is generated when the process
                 * receives the signal specified by process.report.signal.
                 * @default false
                 */
                reportOnSignal: boolean;
                /**
                 * If true, a diagnostic report is generated on uncaught exception.
                 * @default false
                 */
                reportOnUncaughtException: boolean;
                /**
                 * The signal used to trigger the creation of a diagnostic report.
                 * @default 'SIGUSR2'
                 */
                signal: Signals;
                /**
                 * Writes a diagnostic report to a file. If filename is not provided, the default filename
                 * includes the date, time, PID, and a sequence number.
                 * The report's JavaScript stack trace is taken from err, if present.
                 *
                 * @param fileName Name of the file where the report is written.
                 * This should be a relative path, that will be appended to the directory specified in
                 * `process.report.directory`, or the current working directory of the Node.js process,
                 * if unspecified.
                 * @param error A custom error used for reporting the JavaScript stack.
                 * @return Filename of the generated report.
                 */
                writeReport(fileName?: string): string;
                writeReport(error?: Error): string;
                writeReport(fileName?: string, err?: Error): string;
            }
            interface ResourceUsage {
                fsRead: number;
                fsWrite: number;
                involuntaryContextSwitches: number;
                ipcReceived: number;
                ipcSent: number;
                majorPageFault: number;
                maxRSS: number;
                minorPageFault: number;
                sharedMemorySize: number;
                signalsCount: number;
                swappedOut: number;
                systemCPUTime: number;
                unsharedDataSize: number;
                unsharedStackSize: number;
                userCPUTime: number;
                voluntaryContextSwitches: number;
            }
            interface EmitWarningOptions {
                /**
                 * When `warning` is a `string`, `type` is the name to use for the _type_ of warning being emitted.
                 *
                 * @default 'Warning'
                 */
                type?: string | undefined;
                /**
                 * A unique identifier for the warning instance being emitted.
                 */
                code?: string | undefined;
                /**
                 * When `warning` is a `string`, `ctor` is an optional function used to limit the generated stack trace.
                 *
                 * @default process.emitWarning
                 */
                ctor?: Function | undefined;
                /**
                 * Additional text to include with the error.
                 */
                detail?: string | undefined;
            }
            interface ProcessConfig {
                readonly target_defaults: {
                    readonly cflags: any[];
                    readonly default_configuration: string;
                    readonly defines: string[];
                    readonly include_dirs: string[];
                    readonly libraries: string[];
                };
                readonly variables: {
                    readonly clang: number;
                    readonly host_arch: string;
                    readonly node_install_npm: boolean;
                    readonly node_install_waf: boolean;
                    readonly node_prefix: string;
                    readonly node_shared_openssl: boolean;
                    readonly node_shared_v8: boolean;
                    readonly node_shared_zlib: boolean;
                    readonly node_use_dtrace: boolean;
                    readonly node_use_etw: boolean;
                    readonly node_use_openssl: boolean;
                    readonly target_arch: string;
                    readonly v8_no_strict_aliasing: number;
                    readonly v8_use_snapshot: boolean;
                    readonly visibility: string;
                };
            }
            interface Process extends EventEmitter {
                /**
                 * The `process.stdout` property returns a stream connected to`stdout` (fd `1`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `1` refers to a file, in which case it is
                 * a `Writable` stream.
                 *
                 * For example, to copy `process.stdin` to `process.stdout`:
                 *
                 * ```js
                 * import { stdin, stdout } from 'process';
                 *
                 * stdin.pipe(stdout);
                 * ```
                 *
                 * `process.stdout` differs from other Node.js streams in important ways. See `note on process I/O` for more information.
                 */
                stdout: WriteStream & {
                    fd: 1;
                };
                /**
                 * The `process.stderr` property returns a stream connected to`stderr` (fd `2`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `2` refers to a file, in which case it is
                 * a `Writable` stream.
                 *
                 * `process.stderr` differs from other Node.js streams in important ways. See `note on process I/O` for more information.
                 */
                stderr: WriteStream & {
                    fd: 2;
                };
                /**
                 * The `process.stdin` property returns a stream connected to`stdin` (fd `0`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `0` refers to a file, in which case it is
                 * a `Readable` stream.
                 *
                 * For details of how to read from `stdin` see `readable.read()`.
                 *
                 * As a `Duplex` stream, `process.stdin` can also be used in "old" mode that
                 * is compatible with scripts written for Node.js prior to v0.10\.
                 * For more information see `Stream compatibility`.
                 *
                 * In "old" streams mode the `stdin` stream is paused by default, so one
                 * must call `process.stdin.resume()` to read from it. Note also that calling`process.stdin.resume()` itself would switch stream to "old" mode.
                 */
                stdin: ReadStream & {
                    fd: 0;
                };
                openStdin(): Socket;
                /**
                 * The `process.argv` property returns an array containing the command-line
                 * arguments passed when the Node.js process was launched. The first element will
                 * be {@link execPath}. See `process.argv0` if access to the original value
                 * of `argv[0]` is needed. The second element will be the path to the JavaScript
                 * file being executed. The remaining elements will be any additional command-line
                 * arguments.
                 *
                 * For example, assuming the following script for `process-args.js`:
                 *
                 * ```js
                 * import { argv } from 'process';
                 *
                 * // print process.argv
                 * argv.forEach((val, index) => {
                 *   console.log(`${index}: ${val}`);
                 * });
                 * ```
                 *
                 * Launching the Node.js process as:
                 *
                 * ```console
                 * $ node process-args.js one two=three four
                 * ```
                 *
                 * Would generate the output:
                 *
                 * ```text
                 * 0: /usr/local/bin/node
                 * 1: /Users/mjr/work/node/process-args.js
                 * 2: one
                 * 3: two=three
                 * 4: four
                 * ```
                 * @since v0.1.27
                 */
                argv: string[];
                /**
                 * The `process.argv0` property stores a read-only copy of the original value of`argv[0]` passed when Node.js starts.
                 *
                 * ```console
                 * $ bash -c 'exec -a customArgv0 ./node'
                 * > process.argv[0]
                 * '/Volumes/code/external/node/out/Release/node'
                 * > process.argv0
                 * 'customArgv0'
                 * ```
                 * @since v6.4.0
                 */
                argv0: string;
                /**
                 * The `process.execArgv` property returns the set of Node.js-specific command-line
                 * options passed when the Node.js process was launched. These options do not
                 * appear in the array returned by the {@link argv} property, and do not
                 * include the Node.js executable, the name of the script, or any options following
                 * the script name. These options are useful in order to spawn child processes with
                 * the same execution environment as the parent.
                 *
                 * ```console
                 * $ node --harmony script.js --version
                 * ```
                 *
                 * Results in `process.execArgv`:
                 *
                 * ```js
                 * ['--harmony']
                 * ```
                 *
                 * And `process.argv`:
                 *
                 * ```js
                 * ['/usr/local/bin/node', 'script.js', '--version']
                 * ```
                 *
                 * Refer to `Worker constructor` for the detailed behavior of worker
                 * threads with this property.
                 * @since v0.7.7
                 */
                execArgv: string[];
                /**
                 * The `process.execPath` property returns the absolute pathname of the executable
                 * that started the Node.js process. Symbolic links, if any, are resolved.
                 *
                 * ```js
                 * '/usr/local/bin/node'
                 * ```
                 * @since v0.1.100
                 */
                execPath: string;
                /**
                 * The `process.abort()` method causes the Node.js process to exit immediately and
                 * generate a core file.
                 *
                 * This feature is not available in `Worker` threads.
                 * @since v0.7.0
                 */
                abort(): never;
                /**
                 * The `process.chdir()` method changes the current working directory of the
                 * Node.js process or throws an exception if doing so fails (for instance, if
                 * the specified `directory` does not exist).
                 *
                 * ```js
                 * import { chdir, cwd } from 'process';
                 *
                 * console.log(`Starting directory: ${cwd()}`);
                 * try {
                 *   chdir('/tmp');
                 *   console.log(`New directory: ${cwd()}`);
                 * } catch (err) {
                 *   console.error(`chdir: ${err}`);
                 * }
                 * ```
                 *
                 * This feature is not available in `Worker` threads.
                 * @since v0.1.17
                 */
                chdir(directory: string): void;
                /**
                 * The `process.cwd()` method returns the current working directory of the Node.js
                 * process.
                 *
                 * ```js
                 * import { cwd } from 'process';
                 *
                 * console.log(`Current directory: ${cwd()}`);
                 * ```
                 * @since v0.1.8
                 */
                cwd(): string;
                /**
                 * The port used by the Node.js debugger when enabled.
                 *
                 * ```js
                 * import process from 'process';
                 *
                 * process.debugPort = 5858;
                 * ```
                 * @since v0.7.2
                 */
                debugPort: number;
                /**
                 * The `process.emitWarning()` method can be used to emit custom or application
                 * specific process warnings. These can be listened for by adding a handler to the `'warning'` event.
                 *
                 * ```js
                 * import { emitWarning } from 'process';
                 *
                 * // Emit a warning with a code and additional detail.
                 * emitWarning('Something happened!', {
                 *   code: 'MY_WARNING',
                 *   detail: 'This is some additional information'
                 * });
                 * // Emits:
                 * // (node:56338) [MY_WARNING] Warning: Something happened!
                 * // This is some additional information
                 * ```
                 *
                 * In this example, an `Error` object is generated internally by`process.emitWarning()` and passed through to the `'warning'` handler.
                 *
                 * ```js
                 * import process from 'process';
                 *
                 * process.on('warning', (warning) => {
                 *   console.warn(warning.name);    // 'Warning'
                 *   console.warn(warning.message); // 'Something happened!'
                 *   console.warn(warning.code);    // 'MY_WARNING'
                 *   console.warn(warning.stack);   // Stack trace
                 *   console.warn(warning.detail);  // 'This is some additional information'
                 * });
                 * ```
                 *
                 * If `warning` is passed as an `Error` object, the `options` argument is ignored.
                 * @since v8.0.0
                 * @param warning The warning to emit.
                 */
                emitWarning(warning: string | Error, ctor?: Function): void;
                emitWarning(warning: string | Error, type?: string, ctor?: Function): void;
                emitWarning(warning: string | Error, type?: string, code?: string, ctor?: Function): void;
                emitWarning(warning: string | Error, options?: EmitWarningOptions): void;
                /**
                 * The `process.env` property returns an object containing the user environment.
                 * See [`environ(7)`](http://man7.org/linux/man-pages/man7/environ.7.html).
                 *
                 * An example of this object looks like:
                 *
                 * ```js
                 * {
                 *   TERM: 'xterm-256color',
                 *   SHELL: '/usr/local/bin/bash',
                 *   USER: 'maciej',
                 *   PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',
                 *   PWD: '/Users/maciej',
                 *   EDITOR: 'vim',
                 *   SHLVL: '1',
                 *   HOME: '/Users/maciej',
                 *   LOGNAME: 'maciej',
                 *   _: '/usr/local/bin/node'
                 * }
                 * ```
                 *
                 * It is possible to modify this object, but such modifications will not be
                 * reflected outside the Node.js process, or (unless explicitly requested)
                 * to other `Worker` threads.
                 * In other words, the following example would not work:
                 *
                 * ```console
                 * $ node -e 'process.env.foo = "bar"' &#x26;&#x26; echo $foo
                 * ```
                 *
                 * While the following will:
                 *
                 * ```js
                 * import { env } from 'process';
                 *
                 * env.foo = 'bar';
                 * console.log(env.foo);
                 * ```
                 *
                 * Assigning a property on `process.env` will implicitly convert the value
                 * to a string. **This behavior is deprecated.** Future versions of Node.js may
                 * throw an error when the value is not a string, number, or boolean.
                 *
                 * ```js
                 * import { env } from 'process';
                 *
                 * env.test = null;
                 * console.log(env.test);
                 * // => 'null'
                 * env.test = undefined;
                 * console.log(env.test);
                 * // => 'undefined'
                 * ```
                 *
                 * Use `delete` to delete a property from `process.env`.
                 *
                 * ```js
                 * import { env } from 'process';
                 *
                 * env.TEST = 1;
                 * delete env.TEST;
                 * console.log(env.TEST);
                 * // => undefined
                 * ```
                 *
                 * On Windows operating systems, environment variables are case-insensitive.
                 *
                 * ```js
                 * import { env } from 'process';
                 *
                 * env.TEST = 1;
                 * console.log(env.test);
                 * // => 1
                 * ```
                 *
                 * Unless explicitly specified when creating a `Worker` instance,
                 * each `Worker` thread has its own copy of `process.env`, based on its
                 * parent thread’s `process.env`, or whatever was specified as the `env` option
                 * to the `Worker` constructor. Changes to `process.env` will not be visible
                 * across `Worker` threads, and only the main thread can make changes that
                 * are visible to the operating system or to native add-ons.
                 * @since v0.1.27
                 */
                env: ProcessEnv;
                /**
                 * The `process.exit()` method instructs Node.js to terminate the process
                 * synchronously with an exit status of `code`. If `code` is omitted, exit uses
                 * either the 'success' code `0` or the value of `process.exitCode` if it has been
                 * set. Node.js will not terminate until all the `'exit'` event listeners are
                 * called.
                 *
                 * To exit with a 'failure' code:
                 *
                 * ```js
                 * import { exit } from 'process';
                 *
                 * exit(1);
                 * ```
                 *
                 * The shell that executed Node.js should see the exit code as `1`.
                 *
                 * Calling `process.exit()` will force the process to exit as quickly as possible
                 * even if there are still asynchronous operations pending that have not yet
                 * completed fully, including I/O operations to `process.stdout` and`process.stderr`.
                 *
                 * In most situations, it is not actually necessary to call `process.exit()`explicitly. The Node.js process will exit on its own _if there is no additional_
                 * _work pending_ in the event loop. The `process.exitCode` property can be set to
                 * tell the process which exit code to use when the process exits gracefully.
                 *
                 * For instance, the following example illustrates a _misuse_ of the`process.exit()` method that could lead to data printed to stdout being
                 * truncated and lost:
                 *
                 * ```js
                 * import { exit } from 'process';
                 *
                 * // This is an example of what *not* to do:
                 * if (someConditionNotMet()) {
                 *   printUsageToStdout();
                 *   exit(1);
                 * }
                 * ```
                 *
                 * The reason this is problematic is because writes to `process.stdout` in Node.js
                 * are sometimes _asynchronous_ and may occur over multiple ticks of the Node.js
                 * event loop. Calling `process.exit()`, however, forces the process to exit _before_ those additional writes to `stdout` can be performed.
                 *
                 * Rather than calling `process.exit()` directly, the code _should_ set the`process.exitCode` and allow the process to exit naturally by avoiding
                 * scheduling any additional work for the event loop:
                 *
                 * ```js
                 * import process from 'process';
                 *
                 * // How to properly set the exit code while letting
                 * // the process exit gracefully.
                 * if (someConditionNotMet()) {
                 *   printUsageToStdout();
                 *   process.exitCode = 1;
                 * }
                 * ```
                 *
                 * If it is necessary to terminate the Node.js process due to an error condition,
                 * throwing an _uncaught_ error and allowing the process to terminate accordingly
                 * is safer than calling `process.exit()`.
                 *
                 * In `Worker` threads, this function stops the current thread rather
                 * than the current process.
                 * @since v0.1.13
                 * @param [code=0] The exit code.
                 */
                exit(code?: number): never;
                /**
                 * A number which will be the process exit code, when the process either
                 * exits gracefully, or is exited via {@link exit} without specifying
                 * a code.
                 *
                 * Specifying a code to {@link exit} will override any
                 * previous setting of `process.exitCode`.
               edDisclaimerLearnMoreClick=e=>()=>{this._scribeAction({component:e,element:"learn_more",action:"click"})},this._handlePromotedIndicatorClick=()=>{this._handleAsyncPromotedEvent(ie.dx.FOOTER_PROFILE)},this._handleFocus=()=>{this.setState({enableKeyboardShortcuts:!0})},this._handleBlur=()=>{this.setState({enableKeyboardShortcuts:!1})},this._getPromotedContent=()=>{const{displayPromotedContent:e,tweet:t}=this.props;return e?t.promoted_content:void 0},this._handleImpression=e=>{this._shouldLogPromotedImpression(e)&&this._handleAsyncPromotedEvent(ie.dx.IMPRESSION)},this._handleFullyVisible=e=>{this._shouldLogPromotedImpression(e)&&this._handleAsyncPromotedEvent(ie.dx.DWELL)},this._handleResize=(e,t)=>{!this._isProbablyRemovedByAdBlocker(e)&&this._isProbablyRemovedByAdBlocker(t)&&(Y.Z.recordAdBlockerPresence(),this._isCompatibilityScribeEnabled&&this._scribeAction({action:"blocked_ad"}))},this._handleInlineReplyClick=e=>{const{loggedInUserId:t}=this.context,{history:i,tweet:n}=this.props,o=this._getPromotedContent();e.preventDefault(),this._scribeAction({element:"inline_reply",action:"reply"}),i.push({state:{inReplyToStatusId:n.id_str,isSelfThreadReply:!!t&&(0,de.aT)({tweet:n,loggedInUserId:t}),promotedContent:o},pathname:"/compose/tweet"})},this._handleLikeSuccess=()=>{if(this.context.featureSwitches.isTrue("home_timeline_like_reactivity_enabled")){const{onLike:e}=this.props,t="LikeReactionFatigue";try{const i=JSON.parse(window.sessionStorage.getItem(t))||0;i<this.context.featureSwitches.getNumberValue("home_timeline_like_reactivity_fatigue")&&e&&e().then((e=>{null!=e&&e.performed&&window.sessionStorage.setItem(t,JSON.stringify(i+1))}))}catch(e){}}const{pinnedRepliesEducationFlag:e,pinnedReplyState:t}=this.props;t===ue.C.Pinnable&&e&&this.context.featureSwitches.isTrue("responsive_web_pinned_replies_enabled")&&(this._scribeAction({element:"pinned_reply_nux",action:"impression"}),this.setState({showPinnedReplyEducationSheet:!0}))},this._handleReplyContextClick=(e,t)=>this._scribeAction({element:"reply_context",action:"click"},{event_value:t}),this._handleAsyncPromotedEvent=(e,t)=>{const{createLocalApiErrorHandler:i,log:n,tweet:o}=this.props,s=this._getPromotedContent();if(s){const{disclosure_type:r,impression_id:l}=s;n({disclosureType:r,itemId:o.id_str,itemType:ie.bj.TWEET,params:{event:e,impression_id:l,...t}}).catch(i())}},this._handleModeratedIconClick=()=>this._scribeAction({element:"moderated_replies_icon",action:"click"}),this._handleModeratedIconShown=()=>this._scribeAction({element:"moderated_replies_icon",action:"impression"}),this._handleBirdwatchNotesIconClick=()=>this._scribeAction({element:"birdwatch_notes_icon",action:"click"}),this._handleBirdwatchNotesIconShown=()=>this._scribeAction({element:"birdwatch_notes_icon",action:"impression"}),this._handleAnalyticsClick=()=>{this._scribeAction({element:"analytics",action:"click"})},this._handlePromoteButtonClick=()=>{this._scribeAction({element:"promote",action:"click"})},this._handlePromoteAgainButtonClick=()=>{this._scribeAction({element:"promote_again",action:"click"})},this._handleVibeClick=()=>{var e,t;const{tweet:i}=this.props;this._scribeAction({element:"vibe_pill",action:"click"},{items:[{id:i.id_str,vibe_details:{vibe_text:null==(e=i.vibe)?void 0:e.text,...null==(t=i.vibe)?void 0:t.annotation}}]})},this._handleAvatarClick=()=>{const{tweet:e}=this.props;this._handleSaveAsRecentSearchUser(),this._scribeAction({element:"avatar",action:"profile_click"},{profile_id:`${e.user.id}`},void 0,!0),this._handleAsyncPromotedEvent(ie.dx.PROFILE_IMAGE_CLICK)},this._handleCaretClick=()=>{this._scribeAction({element:"caret",action:"click"}),this._shouldRenderImmediateDismiss()&&this.setState({showLeaveBehindMenu:!0})},this._handleTweetClick=a.Z.selectiveClickHandler((e=>{if(!e.defaultPrevented){if(e.stopPropagation(),window.getSelection().toString().length)return;const{onTweetClick:t,tweet:i}=this.props;null==t||t(i.isReported),this._maybeAddViewingLatestTweetToast(),this._scribeAction({element:"tweet",action:"click"}),this._handleAsyncPromotedEvent(ie.dx.VIEW_DETAILS)}})),this._isInEditHistoryScreen=()=>{var e;const{tweet:t}=this.props,i=_.Z.getOriginalTweet(t),{history:n}=this.context,o=null==(e=i.edit_control)?void 0:e.edit_tweet_ids;return!(null==o||!o.find((e=>n.location.pathname.includes(`/${e}/history`))))},this._maybeAddViewingLatestTweetToast=e=>{var t;const{addToast:i,tweet:n}=this.props,o=_.Z.getOriginalTweet(n);(e?null==(t=o.quoted_status)?void 0:t.isStaleEdit:o.isStaleEdit)&&!this._isInEditHistoryScreen()&&this._isEditTweetConsumptionEnabled()&&i({text:lt})},this._handlePreviewClick=e=>{e.preventDefault()},this._handleEmbeddedMediaPreviewClick=e=>{null==e||e.preventDefault()},this._handleEmbeddedMediaClick=()=>{this._scribeAction({element:"platform_photo_card",action:"click"}),this._handleAsyncPromotedEvent(ie.dx.EMBEDDED_MEDIA)},this._handleQuoteTweetClick=()=>{this._maybeAddViewingLatestTweetToast(!0),this._scribeAction({element:"tweet",action:"click"}),this._handleAsyncPromotedEvent(ie.dx.VIEW_DETAILS)},this._handleEntityClick=(e,t,i)=>{const{adFreeArticleDomains:n,createLocalApiErrorHandler:o,fetchAdFreeToken:s,tweet:r}=this.props,l=ie._4[t],a=se.Z[t],c=this._getPromotedContent(),h=le.Z.getClickTrackingEmbedDetails(c,i);if(l){const t=l===ie.dx.URL_CLICK&&e.currentTarget instanceof window.HTMLElement?{url:e.currentTarget.href}:void 0;this._handleAsyncPromotedEvent(l,t)}if(t===d.Z.MEDIA)return this._handleTweetClick(e);t===d.Z.URL&&h&&this._scribeAction({action:u.bQ.CLICK_ID_EMBED},{},h);let _=!1;if(this._hasClaimsForAdFreeArticles&&null!=i&&i.expandedUrl){const t=new URL(i.expandedUrl).hostname,[l,a]=new ee.p3(s,o()).getAdFreeArticlesClickHandler({destinationUrl:i.embeddedUrl,linkDomain:t,adFreeArticleDomains:n,tweetAuthorUserId:r.user.id_str});l&&(a(e),_=!0)}if(t===d.Z.MENTION){const e=null!=i&&i.text?[{item_type:re.Z.ItemType.USER,name:i.text,id:i.id_str}]:void 0;return this._scribeAction({action:a},{targets:e},void 0,void 0,_)}if(t===d.Z.HASHTAG){const e=null!=i&&i.text?[{name:i.text}]:void 0;return this._scribeAction({action:a},{targets:e},void 0,void 0,_)}return t===d.Z.INTERACTIVE_HIGHLIGHT&&void 0!==(null==i?void 0:i.id)?this._scribeAction({element:"interactive_text",action:a},{interactive_text_details:{id:i.id}},void 0,void 0,_):t===d.Z.INTERACTIVE_CONVERSATION&&void 0!==(null==i?void 0:i.id)?this._scribeAction({element:"interactive_conversation",action:a},{interactive_conversation_details:{id:i.id,original_tweet_id:r.id_str}},void 0,void 0,_):void(a&&this._scribeAction({action:a},void 0,void 0,void 0,_))},this._handlePromotedUserProfileCardClick=()=>{const{tweet:e}=this.props;this._scribeAction({element:"user_recommendation",action:"profile_click"},{profile_id:`${e.user.id}`},void 0,!0),this._handleAsyncPromotedEvent(ie.dx.SCREEN_NAME_CLICK)},this._handleScreenNameClick=()=>{const{tweet:e}=this.props;this._handleSaveAsRecentSearchUser(),this._scribeAction({element:"user",action:"profile_click"},{profile_id:`${e.user.id}`},void 0,!0),this._handleAsyncPromotedEvent(ie.dx.SCREEN_NAME_CLICK)},this._handleSelfThreadClick=()=>this._scribeAction({element:"self_thread",action:"click"}),this._handleSelfThreadImpression=()=>this._scribeAction({element:"self_thread",action:"impression"}),this._handleTopicFetch=()=>{var e;const{createLocalApiErrorHandler:t,fetchTopicIfNeeded:i,socialContext:n}=this.props,o=n&&(null==(e=n.topicContext)?void 0:e.topicId);o&&i(o).catch(t())},this._handleCommunityFetch=()=>{const{createLocalApiErrorHandler:e,fetchCommunityIfNeeded:t,tweet:i}=this.props;if(this._isCommunitiesEnabled&&i){var n;const o=i.community_id_str,s=null==(n=i.quoted_status)?void 0:n.community_id_str;o&&t(o).catch(e()),s&&t(s).catch(e())}},this._handleLongformNotesLearnMoreRender=()=>{const{tweet:e,updateLongformNotesLearnMoreBanner:t}=this.props,i=_.Z.getOriginalTweet(e),n=_.Z.hasLongformNoteUrl(i);e&&n&&this._twitterArticleLearnMoreBannerEnabled&&t(i.id_str)},this._handleUndoTopicNotInterested=()=>{const{createLocalApiErrorHandler:e,topic:t,undoTopicNotInterested:i}=this.props;this._scribeAction({element:"topic",action:"un_not_interested"}),t&&i(t.id).catch(e())},this._handleUserFollowIndicator=()=>{this._scribeAction({component:"super_follower_educaton",element:"indicator",action:"click"})},this._handleUserFollowIndicatorDismiss=()=>{this._scribeAction({component:"super_follower_education",action:"dismiss"})},this._handleUserFollowIndicatorLearnMoreClick=e=>{this._scribeAction({component:"super_follower_education",element:"learn_more",action:"click"}),e&&e()},this._handleCardLinkClick=e=>{var t;const{adFreeArticleDomains:i,analytics:n,createLocalApiErrorHandler:o,fetchAdFreeToken:s,isCardArticle:r,setArticlesVisited:a,tweet:d}=this.props;if(r&&this._isArticleNudgeEnabled){var c;const e=null==d||null==(c=d.card)?void 0:c.url;var h;if(e)a(e),n.scribe({component:"article_nudge",element:"read_article",action:"click",data:{items:[{token:null==d||null==(h=d.card)?void 0:h.url,in_reply_to_tweet_id:d.id_str}]}})}const u=null==d||null==(t=d.card)?void 0:t.binding_values;if(this._hasClaimsForAdFreeArticles&&u){const[t,n]=new ee.p3(s,o()).getAdFreeArticlesClickHandler({destinationUrl:l.Z.getBindingValue(u,"card_url"),linkDomain:l.Z.getBindingValue(u,"domain"),adFreeArticleDomains:i});t&&n(e)}},this._handleSaveAsRecentSearchUser=()=>{const{saveAsRecentSearch:e,shouldStoreTypeaheadItem:t,tweet:i}=this.props,{user:n}=i;e&&t&&t(re.Z.ItemType.USER)&&e({user:{id:n.id_str,type:ae.g2.User}})},this._isSelected=()=>{const{conversationTreeMetadata:e,tweet:t}=this.props,{selectedTweet:i}=e||{};return i&&t.id_str===i.selectedTweetId},this._handleMediaHashtagHighlightClick=()=>{this._handleAsyncPromotedEvent(ie.dx.HASHTAG_CLICK)},this._handleOnPinnedReplyNUXClose=()=>{this.props.addPinnedReplyEducationFlag(),this.setState({showPinnedReplyEducationSheet:!1})},this._renderPinnedReplyNUX=()=>this.state.showPinnedReplyEducationSheet?o.createElement(q,{onClose:this._handleOnPinnedReplyNUXClose}):null,this._renderLeaveBehindMenu=e=>{const t=this.state.leaveBehindActionMenuItems,i=this._isReplyTimelineImmediateDismiss();return o.createElement(r.Z,{behavioralEventContext:e},o.createElement(R,{heading:i?at:void 0,items:t,onMenuDismiss:this._hideLeaveBehindMenu,onUndoClick:this._hideLeaveBehindMenu,subheading:i?dt:void 0,withUndo:!0}))},this._hideLeaveBehindMenu=()=>{this.setState({showLeaveBehindMenu:!1})},this._isReplyTimelineImmediateDismiss=()=>{const{tweet:e,tweetDetailNav:t}=this.props,{in_reply_to_status_id_str:i,self_thread:n,user:o}=e,s=!!i,r=(null==o?void 0:o.id_str)===this.context.loggedInUserId,l=!this.context.loggedInUserId,a=(null==n?void 0:n.id_str)===i,d="tweet"===t,c=!!e.community_id_str;return s&&d&&!(l||r||a||c)&&this._isLeaveBehindMenuRepliesEnabled()},this._shouldRenderImmediateDismiss=()=>{var e;return!(!((null==(e=this.props.feedbackItems)?void 0:e.length)&&this._isLeaveBehindMenuHomeEnabled())&&!this._isReplyTimelineImmediateDismiss())},this._setLeaveBehindActionItems=e=>{this.setState({leaveBehindActionMenuItems:e})},this.state={displayReported:!1,enableKeyboardShortcuts:!1,leaveBehindActionMenuItems:[],showBlockOrUnblockConfirmation:!1,showLeaveBehindMenu:!1,showPinnedReplyEducationSheet:!1};const n=this._getPromotedContent();this._shouldHidePromotedTweet=h.Z.isPromoted(n)&&Y.Z.shouldHidePromotedTweets(this.context.featureSwitches)}shouldComponentUpdate(e,t){return!(0,w.Z)(this.props,e)||!(0,w.Z)(this.state,t)}componentDidMount(){this._shouldHidePromotedTweet&&this._isCompatibilityScribeEnabled&&this._scribeAction({action:"hide_promoted"}),this._hasTweetNote()&&this._scribeAction({element:"note_tweet",action:"impression"}),this._handleTopicFetch(),this._handleCommunityFetch(),this._handleLongformNotesLearnMoreRender(),this._hasClaimsForAdFreeArticles&&this.props.loadAdFreeArticleDomainsFromPersistence()}render(){var e;const{loggedInUserId:t}=this.context,{conversationPosition:i,conversationTreeMetadata:n,showWithheldBannerOnMyTweets:r,tweet:l}=this.props;if(!this._shouldRender())return n?o.createElement(X.Z,{conversationPosition:i,conversationTreeMetadata:n},rt):null;const a=(null==l||null==(e=l.user)?void 0:e.id_str)===t,d=(0,Q.j)(_.Z.getOriginalTweet(l).withheld_scope),c=a&&!l.retweeted_status,h=c&&"user"===_.Z.getOriginalTweet(l).withheld_scope&&!r,u=(0,oe.G$)(l)&&!this.state.displayReported;let m=null;if(d)m=o.createElement(s.Z,null,h?null:this._renderWithheldTweet(),c?this._renderContent():null);else if(u)m=this._renderReportedTombstone();else if(this.state.showLeaveBehindMenu){const e={viewType:"leave_behind_menu"};m=this._renderLeaveBehindMenu(e)}else m=this._renderContent();return o.createElement(o.Fragment,null,m,this._renderIntentPrompt(),this.state.showBlockOrUnblockConfirmation?this._renderBlockOrUnblockConfirmationSheet():null,this._renderPinnedReplyNUX())}_renderIntentPrompt(){const{contextualClientEventInfo:e,forwardPivotInfo:t,history:i,nudges:n,tweet:s,tweetId:r}=this.props;if(s&&"focal_module"===(null==e?void 0:e.component)&&i.location.pathname.indexOf("/intent/")>-1&&i.location.query.tweet_id===r)return o.createElement(j.Z,{forwardPivotInfo:t,history:i,location:i.location,nudges:n,tweetId:s.id_str})}_renderWithheldTweet(){const{conversationPosition:e,conversationTreeMetadata:t,tweet:i}=this.props,n=i.user.id_str,s=_.Z.getOriginalTweet(i),{loggedInUserId:r}=this.context,l=!!r&&r===n&&s.retweeted,a=s.withheld_text||s.text,d=s.withheld_entities||s.entities,c=i.user.id_str===r;return o.createElement(Q.Z,{conversationPosition:e,conversationTreeMetadata:c?void 0:t,displayTextRange:s.display_text_range,entities:d,lang:s.lang,onUnretweet:l?this._handleUnretweet:void 0,showUnretweetButton:l,text:a})}_renderReportedTombstone(){const{conversationPosition:e,conversationTreeMetadata:t,tweet:i}=this.props,n=_.Z.getOriginalTweet(i),s=(0,oe.jD)(n.reportingVisibility);return o.createElement(X.Z,{actionText:st,conversationPosition:e,conversationTreeMetadata:t,lang:n.lang,onClick:this._handleShowReportedTweet},s)}_renderContent(){var e,t,i;const{allowDownvote:n,analytics:s,bookmarkFolderId:r,contextTweet:l,contextualClientEventInfo:a,conversationPosition:d,conversationTreeMetadata:c,displayBlocked:h,forwardPivotInfo:u,hasModeratedReplies:m,hideConversationControlsEducationText:p,hideExclusivityInfoEducationTextInReplies:w,hideTrustedFriendsEducationTextInReplies:C,hitHighlights:v,injectedFeedbackItem:g,innerForwardPivotInfo:k,innerNudges:y,isReaderMode:I,isUnread:T,linkify:f,location:A,loggedInUser:E,nudges:x,promotedContentAdvertiser:P,quoteTweetSocialContextProps:S,quotedTweetTombstoneInfo:M,replyBadge:L,replyContext:U,rootTweetAuthorId:Z,shouldSelfThreadIncludeAvatar:R,showReplyFilterInlineCallout:B,socialContext:F,socialContextColor:D,topic:N,topicFollowPrompt:H,tweet:O,withActions:V,withActionsDisabled:K,withBirdwatchPivots:W,withCardLinks:z,withInlineMedia:q,withQuotedTweetLinks:Q,withRemoveFromBookmarks:j,withSelfThread:X,withSocialContext:$,withUserPresence:J}=this.props,{enableKeyboardShortcuts:Y}=this.state,ee=_.Z.getOriginalTweet(O),te=this._getPromotedContent(),ie=null==(e=A.state)?void 0:e.overflow,oe=null==(t=A.state)||null==(i=t.column)?void 0:i.showSmallMedia,se={...{allowDownvote:n,bookmarkFolderId:r,contextTweet:l,contextualClientEventInfo:a,conversationPosition:d,conversationTreeMetadata:c,displayBlocked:h,enableKeyboardShortcuts:Y,forwardPivotInfo:u,nudges:x,innerNudges:y,hasModeratedReplies:m,hideConversationControlsEducationText:p,hideExclusivityInfoEducationTextInReplies:w,hideTrustedFriendsEducationTextInReplies:C,hitHighlights:v,injectedFeedbackItem:g,innerForwardPivotInfo:k,linkify:f,loggedInUser:E,promotedContentAdvertiser:P,quotedTweetTombstoneInfo:M,quoteTweetSocialContextProps:S,replyBadge:L,replyContext:U,rootTweetAuthorId:Z,shouldSelfThreadIncludeAvatar:R,showReplyFilterInlineCallout:B,socialContext:F,socialContextColor:D,topic:N,topicFollowPrompt:H,tweet:O,withActions:V,withActionsDisabled:K,withBirdwatchPivots:W,withCardLinks:z,withInlineMedia:q,withQuotedTweetLinks:Q,withRemoveFromBookmarks:j,withSelfThread:X,withSocialContext:$,withHalvedMediaSize:oe,withCondensedQuoteTweet:oe,withUnreadStyles:T,withUserPresence:J},...I?this._getReaderModeTweetProps():this._getBaseTweetProps()},re=o.createElement(ne.nO,{data:this._getMemoizedScribeData(ee,te,ie,void 0,s.contextualScribeData)},o.crKey:null},r],type:"OpenseaCollectionMetadata",abstractKey:null}],storageKey:null}],storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"creator_address",storageKey:null},o,r,{alias:null,args:null,concreteType:"OpenseaNFTTrait",kind:"LinkedField",name:"traits",plural:!0,selections:[{alias:null,args:null,kind:"ScalarField",name:"trait_type",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"value",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"display_type",storageKey:null}],storageKey:null}],type:"OpenseaNFTMetadata",abstractKey:null}],storageKey:null}],storageKey:null},c={alias:null,args:null,kind:"ScalarField",name:"id",storageKey:null}],type:"User",abstractKey:null}],storageKey:null},c],storageKey:null}]},params:{id:"gTkKcR0rAOGFRHAU_uAkTQ",metadata:{features:["responsive_web_twitter_blue_verified_badge_is_enabled"]},name:"userNftContainer_Query",operationKind:"query",text:null}};d.hash="3fc6b9727d078820e10a815ff0ea6680",e.exports=d},23021:(e,a,l)=>{"use strict";l.d(a,{$f:()=>S,KV:()=>f,LI:()=>L,Nn:()=>g,SC:()=>K,Vt:()=>b,X_:()=>F,Xs:()=>p,c4:()=>x,ed:()=>Z,fX:()=>y,op:()=>T});var t=l(2784),n=l(84292),r=l(73228),i=l.n(r),s=l(73952),o=l(97463),c=l(1206),d=l(66961);const u=i().cfd2f35e,m=i().f9e45cfb,g=i().fcd4d489,p=i().a6450e84,y=i().hb279a11,f=i().a9fd20be,_=i().j546fb79,k=i().c9623eeb,b=i().e133be4e,v=i().h7f25e2c,F=i().ae3e9c81,h=i().e68b09b4,E=i().db2f1008,K=Object.freeze({TWEET_CARET:"tweet_caret",PROFILE:"user_profile",LIST_DETAIL:"list_detail",RICH_FEEDBACK:"rich_feedback",TWEET:"tweet",FOLLOWERS_LIST:"followers_list"}),S=e=>({confirmButtonType:"destructiveFilled",headline:m({screenName:e}),label:p,text:y({screenName:e})}),T=({blockAction:e,blockSubtext:a,source:l,testID:t,unblockAction:n,unblockSubtext:r,user:i})=>{let s,o=c.Z;const u=L(i);switch(l){case K.PROFILE:case K.LIST_DETAIL:case K.FOLLOWERS_LIST:o=()=>{i.smart_blocking||!i.blocking?e(u):n(u)};break;case K.TWEET:case K.TWEET_CARET:case K.RICH_FEEDBACK:s=d.uq.block,o=()=>{i.smart_blocking||!i.blocking?e(u):n(u)}}return{behavioralEventContext:{viewType:i.blocking?"unblock":"block"},confirmation:u,onClick:o,testID:t,shortcutKey:s,Icon:C(i.blocking,i.smart_blocking),text:w(i),subText:N({user:i,blockSubtext:a,unblockSubtext:r})}},C=(e,a)=>a||!e?s.default:o.default,N=({blockSubtext:e,unblockSubtext:a,user:l})=>!l.smart_blocking&&l.blocking||!e?l.blocking?a:void 0:e(l.screen_name),w=e=>e.smart_blocking||!e.blocking?g({screenName:e.screen_name}):k({screenName:e.screen_name}),L=e=>{return e.smart_blocking||!e.blocking?S(e.screen_name):(a=e.screen_name,{confirmButtonType:"primary",headline:_({screenName:a}),label:b,text:v});var a},Z=({confirmation:e,handleConfirm:a,onClose:l})=>{const{confirmButtonType:r,headline:i,label:s,text:o}=e;return t.createElement(n.Z,{cancelButtonLabel:u,confirmButtonLabel:s,confirmButtonType:r,headline:i,onCancel:l,onConfirm:a,text:o})},x=e=>({confirmButtonType:"primary",headline:F({screenName:e}),label:h,text:E})},19565:(e,a,l)=>{"use strict";l.d(a,{d:()=>n});var t=l(73228);const n={defaultToast:{text:l.n(t)().b6878b0a},showToast:!0}},17772:(e,a,l)=>{"use strict";l.d(a,{D:()=>n});var t=l(73228);const n={defaultToast:{text:l.n(t)().ca96fe6e},showToast:!0}},34590:(e,a,l)=>{"use strict";l.d(a,{Z:()=>t});const t=Object.freeze({User:"User",ProfileCard:"ProfileCard",UserCompact:"UserCompact",UserConcise:"UserConcise",UserDetailed:"UserDetailed",PendingFollowUser:"PendingFollowUser"})},23962:(e,a,l)=>{"use strict";l.d(a,{J:()=>r,p:()=>n});var t=l(27036);const n=t.Z.columnWidths.secondary.normal,r=t.Z.columnWidths.primary},99426:(e,a,l)=>{"use strict";l.r(a),l.d(a,{UserNftScreenContainer:()=>ca,default:()=>da,userNftContainerQuery:()=>sa});var t,n=l(2784),r=(l(85488),l(7267)),i=l(46253),s=l(92051),o=l(67619),c=l(45855),d=l(64282),u=l(23803),m=l(59824),g=(l(6886),l(25686)),p=l(78052),y=l(77660),f=l.n(y),_=l(36934),k=l(29496),b=l(73186),v=l(73228),F=l.n(v),h=l(39775),E=l(60157),K=l(72983),S=l(50129),T=l(3187),C=l(54793),N=l(84246),w=l(60673),L=l(23962),Z=l(94407),x=l(3613);const M=F().e83b141e,D=void 0!==t?t:t=l(22808),R=({color:e="text",isCondensed:a,openseaNftMetadataData:l})=>{var t,r,i,s,o;const c=f()(D,l);if(!(null!=c&&null!=(t=c.collection)&&t.name||null!=c&&null!=(r=c.collection)&&r.metadata)||"OpenseaCollectionMetadata"!==(null==c||null==(i=c.collection)||null==(s=i.metadata)?void 0:s.__typename))return null;const{image_url:d,verified:u}=c.collection.metadata,m=a||!u,p=m?"subtext1":"body",y=m?I.collectionImageInline:I.collectionImage,k=(b=null==(o=c.collection)?void 0:o.name,v=c.creator_username,b&&v?n.createElement(_.ZP,{color:e,size:p,weight:"bold"},n.createElement(F().I18NFormatMessage,{$i18n:"fbe06ae1"},b,v)):b?n.createElement(_.ZP,{color:e,size:p},b):null);var b,v;return n.createElement(g.Z,{style:I.collectionTitle},d&&n.createElement(Z.Z,{alt:"",source:d,style:y}),n.createElement(g.Z,null,m?n.createElement(x.Z,{color:e},k,u?n.createElement(_.ZP,{color:e,size:p},M):null):n.createElement(n.Fragment,null,k,u?n.createElement(_.ZP,{color:"gray700"},M):null)))},I=b.Z.create((e=>({collectionImage:{height:e.spaces.space40,width:e.spaces.space40,borderRadius:e.borderRadii.medium,marginEnd:e.spaces.space12},collectionImageInline:{height:e.spaces.space20,width:e.spaces.space20,borderRadius:e.borderRadii.small,marginEnd:e.spaces.space8},collectionTitle:{display:"flex",flexDirection:"row",marginBottom:e.spaces.space12}})));var P=l(77920);const O=e=>{if(e.length>11){return`${e.substring(0,6)}...${e.substring(e.length-4)}`}return e};function B({children:e}){return n.createElement(g.Z,{style:A.list},e)}function z({children:e}){return n.createElement(g.Z,{style:A.item},e)}function U({children:e,style:a}){return n.createElement(_.ZP,{style:[a,A.itemTitle]},e)}const A=b.Z.create((e=>({list:{display:"flex",flexWrap:"wrap",flexDirection:"row",justifyContent:"space-between"},item:{width:"40%",marginBottom:e.spaces.space16},itemTitle:{color:e.colors.gray700}})));function H({text:e}){return n.createElement(_.ZP,{size:"headline2",style:W.heading,weight:"bold"},e)}const W=b.Z.create((e=>({heading:{marginTop:e.spaces.space24,marginBottom:e.spaces.space12}})));var V,$;const j=F().dcbace0c,q=F().d4741cb4,Q=F().b748db08,X=F().accae48c,G=F().h8fe11ac,J=void 0!==V?V:V=l(52602),Y=void 0!==$?$:$=l(33394),ee=e=>{const a=(0,w.z)(),l=f()(J,e.nft),t=f()(Y,e.smartContract),r="ERC721"===(null==t?void 0:t.__typename)||"ERC1155"===(null==t?void 0:t.__typename)?t:void 0;return r?n.createElement(g.Z,null,n.createElement(H,{text:j}),n.createElement(B,null,n.createElement(z,null,n.createElement(U,null,Q),n.createElement(_.ZP,{color:"text",link:`https://etherscan.io/address/${r.address}`,onPress:()=>{a.scribe({component:"detail",element:"etherscan_link",action:"click"})},weight:"medium"},O(r.address),n.createElement(P.default,null))),n.createElement(z,null,n.createElement(U,null,X),n.createElement(_.ZP,{weight:"medium"},O(l.token_id))),n.createElement(z,null,n.createElement(U,null,q),n.createElement(_.ZP,{weight:"medium"},r.network)),n.createElement(z,null,n.createElement(U,null,G),n.createElement(_.ZP,{weight:"medium"},r.__typename)))):null},ae=F().ffd9cfe6;function le({onPress:e}){return n.createElement(_.ZP,{color:"link",onPress:e,style:te.link,weight:"bold"},ae)}const te=b.Z.create((e=>({link:{marginVertical:e.spaces.space12}})));var ne;const re=F().ddf0ba7e,ie=void 0!==ne?ne:ne=l(84906),se=e=>{var a,l,t,r;const i=f()(ie,e.openseaNftMetadataData),[s,o]=n.useState(!1),[c,d]=n.useState(!1);if(!(null!=i&&null!=(a=i.collection)&&a.name||null!=i&&null!=(l=i.collection)&&l.metadata)||"OpenseaCollectionMetadata"!==(null==i||null==(t=i.collection)||null==(r=t.metadata)?void 0:r.__typename))return null;const{description:u}=i.collection.metadata;return n.createElement(g.Z,null,n.createElement(H,{text:re}),n.createElement(R,{openseaNftMetadataData:i}),u?n.createElement(_.ZP,{getTextOverflow:o,numberOfLines:c?void 0:4},u):null,u&&s&&!c?n.createElement(le,{onPress:()=>{d(!c)}}):null)};var oe,ce;const de=F().e6aa52aa,ue=void 0!==oe?oe:oe=l(23546),me=void 0!==ce?ce:ce=l(28112),ge=e=>{const a=(0,w.z)(),l=f()(ue,e.openseaNftMetadataData),t=f()(me,e.smartContractData),{creator_address:r,creator_username:i}=l,s="ERC721"===(null==t?void 0:t.__typename)||"ERC1155"===(null==t?void 0:t.__typename)?null==t?void 0:t.network:"",o=i?`https://opensea.io/${i}`:r?`https://opensea.io/${r}`:"";return r||i&&s?n.createElement(g.Z,null,n.createElement(H,{text:de}),r?n.createElement(_.ZP,{color:"text",link:o,onPress:()=>{a.scribe({component:"detail",element:"opensea_profile_link",action:"click"})},weight:"bold"},O(r),o?n.createElement(P.default,null):null):null,s&&i?n.createElement(x.Z,null,n.createElement(_.ZP,null,i),n.createElement(_.ZP,null,s)):null):null};var pe;const ye=F().e36287c6,fe=e=>{const a=f()(void 0!==pe?pe:pe=l(41236),e.openseaNftMetadataData),[t,r]=n.useState(!1),[i,s]=n.useState(!1);return null!=a&&a.description?n.createElement(g.Z,null,n.createElement(H,{text:ye}),n.createElement(_.ZP,{getTextOverflow:r,numberOfLines:i?void 0:4},null==a?void 0:a.description),t&&!i?n.createElement(le,{onPress:()=>{s(!i)}}):null):null};var _e,ke;const be=F().eb023c94,ve=F().ad5dfe80,Fe=F().hb7d1bb4,he=F().i859a9d4,Ee=void 0!==_e?_e:_e=l(10200),Ke=void 0!==ke?ke:ke=l(1706),Se=e=>{const a=(0,w.z)(),[l,t]=n.useState(!1),[r,i]=n.useState(!1),s=f()(Ee,e.nft),o=f()(Ke,e.smartContract),c="ERC721"===(null==o?void 0:o.__typename)||"ERC1155"===(null==o?void 0:o.__typename)?o:void 0,d=null!=c&&c.address&&s.token_id?`https://opensea.io/assets/${c.address}/${s.token_id}`:"https://opensea.io/";return n.createElement(g.Z,null,n.createElement(H,{text:be}),n.createElement(_.ZP,{getTextOverflow:t,numberOfLines:r?void 0:4},ve),n.createElement(_.ZP,{color:"text",link:"https://help.twitter.com/en/using-twitter/twitter-blue-labs#nft",style:Te.helpLink,weight:"bold"},he),l&&!r?n.createElement(le,{onPress:()=>{i(!r)}}):null,n.createElement(g.Z,{style:Te.topBorder},n.createElement(_.ZP,{align:"center",link:d,onPress:()=>{a.scribe({component:"detail",element:"opensea_asset_link",action:"click"})},weight:"bold"},Fe,n.createElement(P.default,null))))},Te=b.Z.create((e=>({helpLink:{marginVertical:e.spaces.space16},topBorder:{paddingTop:e.spaces.space16,marginTop:e.spaces.space16,borderTopColor:e.colors.gray50,borderTopStyle:"solid",borderTopWidth:e.borderWidths.small}})));var Ce,Ne=l(19153),we=l(19313),Le=l(42569),Ze=l(23301);const xe=void 0!==Ce?Ce:Ce=l(98657),Me=F().c6000492,De=e=>{const a=f()(xe,e.user),{featureSwitches:l}=n.useContext(we.rC),{legacy:t}=a,{loggedInUserId:r}=n.useContext(we.rC),i=null==t?void 0:t.profile_image_url_https,s=null==t?void 0:t.id_str,o=null==t?void 0:t.name,c=null==t?void 0:t.screen_name,d=l.isTrue("responsive_web_twitter_blue_verified_badge_is_enabled"),u=t&&r?(0,Le.ET)({loggedInUserId:r,userId:null==t?void 0:t.id_str}):null;return i&&o&&c&&s?n.createElement(g.Z,null,n.createElement(H,{text:Me}),n.createElement(Ne.ZP,{avatarUri:i,decoration:u,displayMode:"UserDetailed",isBlueVerified:d&&!!a.is_blue_verified,isFollowedBy:null==t?void 0:t.followed_by,isProtected:null==t?void 0:t.protected,isVerified:null==t?void 0:t.verified,name:o,promotedItemType:Ze.bj.USER,screenName:c,style:Re.userCell,userId:s,withFollowsYou:!0})):null},Re=b.Z.create((e=>({userCell:{marginHorizontal:-1*b.Z.theme.spacesPx.space16}})));var Ie,Pe;const Oe=F().e83b141e,Be=void 0!==Ie?Ie:Ie=l(62368),ze=void 0!==Pe?Pe:Pe=l(89797),Ue=e=>{var a,l,t,r;const i=f()(ze,e.openseaNftMetadataData),s=f()(Be,e.nft),{token_id:o}=s;return n.createElement(g.Z,null,n.createElement(x.Z,null,n.createElement(_.ZP,{size:"subtext1",weight:"bold"},(null==i||null==(a=i.collection)||null==(l=a.metadata)?void 0:l.name)||""),null!=i&&null!=(t=i.collection)&&null!=(r=t.metadata)&&r.verified?n.createElement(_.ZP,{color:"gray700",size:"subtext1"},Oe):null),n.createElement(_.ZP,{size:"title3",weight:"bold"},(null==i?void 0:i.name)||`#${o}`))};var Ae;const He=void 0!==Ae?Ae:Ae=l(82961),We=F().eadbd438,Ve=e=>{const a=f()(He,e.openseaNftMetadataData),[l,t]=n.useState(!1);n.useEffect((()=>{var e;null!=(e=a.traits)&&e.length&&t(a.traits.length>6)}),[a.traits]);if(null==a||!a.traits||null==a||!a.traits.length)return null;const r=l?a.traits.slice(0,6):a.traits;return n.createElement(g.Z,null,n.createElement(H,{text:We}),n.createElement(B,null,r.map((e=>n.createElement(z,{key:e.trait_type},e.trait_type?n.createElement(U,{style:$e.uppercase},e.trait_type):null,n.createElement(_.ZP,{weight:"medium"},e.value))))),l?n.createElement(le,{onPress:()=>{t(!l)}}):null)},$e=b.Z.create((e=>({uppercase:{textTransform:"uppercase"}})));var je;const qe=void 0!==je?je:je=l(80020),Qe=b.Z.create((e=>({root:{backgroundColor:e.colors.cellBackground,paddingTop:e.spaces.space16,paddingBottom:e.spaces.space32,paddingHorizontal:e.spaces.space24},sideDrawer:{width:L.p+100,borderStartWidth:e.borderWidths.small,borderColor:e.colors.borderColor,borderStyle:"solid",overflow:"auto"},bottomDrawer:{width:"100%",padding:e.spaces.space16,display:"flex"}}))),Xe=e=>{var a,l;const t=f()(qe,e.user),{isBottomDrawer:r}=e;if("OpenseaNFTMetadata"!==(null==t||null==(a=t.nft_avatar_metadata)||null==(l=a.metadata)?void 0:l.__typename))return null;const i=r?Qe.bottomDrawer:Qe.sideDrawer;return n.createElement(g.Z,{style:[Qe.root,i]},n.createElement(Ue,{nft:t.nft_avatar_metadata,openseaNftMetadataData:t.nft_avatar_metadata.metadata}),n.createElement(ge,{openseaNftMetadataData:t.nft_avatar_metadata.metadata,smartContractData:t.nft_avatar_metadata.smart_contract}),n.createElement(De,{user:t}),n.createElement(fe,{openseaNftMetadataData:t.nft_avatar_metadata.metadata}),n.createElement(se,{openseaNftMetadataData:t.nft_avatar_metadata.metadata}),n.createElement(Ve,{openseaNftMetadataData:t.nft_avatar_metadata.metadata}),n.createElement(ee,{nft:t.nft_avatar_metadata,smartContract:t.nft_avatar_metadata.smart_contract}),n.createElement(Se,{nft:t.nft_avatar_metadata,smartContract:t.nft_avatar_metadata.smart_contract}))};var Ge;const Je=F().c1a40fd4,Ye=F().ef1c2c78,ea=F().gd912af2,aa=F().f1d9930c,la=F().a0e81a2e,ta=void 0!==Ge?Ge:Ge=l(9417),na=b.Z.create((e=>({actionsBar:{height:e.spaces.space48,maxWidth:"none",paddingHorizontal:e.spaces.space12},container:{flexDirection:"row",overflowX:"hidden",overflowY:"hidden",height:"100%",width:"100%",position:"relative"},verticalLayout:{flexDirection:"column"},media:{flexGrow:1,flexShrink:1},bottomDrawerContainer:{width:"100%",height:"75vh",overflow:"auto"},footer:{marginBottom:e.spaces.space20,zIndex:1},footerTitle:{marginVertical:e.spaces.space8}}))),ra=e=>{var a,l,t,i,s,o,c,d,u,y,b;const v=(0,w.z)(),{fetchStatus:F,screenName:Z,user:x}=e,[M,D]=n.useState(!1),[I,P]=n.useState(!0),{handleMediaDetailZoomed:O,handleMediaItemTapped:B,hideButtons:z}=(0,N.sI)(),U=(0,r.k6)(),A=f()(ta,x),{width:H}=p.Z.get("window"),W=H-L.p>L.J;if(null==A||null==(a=A.legacy)||!a.profile_image_url_https)return null;const V={id_str:null==A||null==(l=A.legacy)?void 0:l.id_str,expanded_url:null==A||null==(t=A.legacy)?void 0:t.profile_image_url_https,media_url_https:null==A||null==(i=A.legacy)?void 0:i.profile_image_url_https,ext_alt_text:"",type:"photo",original_info:{width:400,height:400}},$="ApiMediaExtensions"===(null==A||null==(s=A.legacy)||null==(o=s.profile_image_extensions)?void 0:o.__typename)?null==A||null==(c=A.legacy)?void 0:c.profile_image_extensions:{},j="ApiMediaColorExtension"===(null==$||null==(d=$.mediaColor)?void 0:d.__typename)&&(null==$||null==(u=$.mediaColor)||null==(y=u.r)||null==(b=y.ok)?void 0:b.palette)||[],q=j.map((e=>({...e,rgb:{blue:e.rgb.blue,red:e.rgb.red,green:e.rgb.green}}))),Q=j&&(0,N.L$)(q),X=()=>{U.goBack({backLocation:`/${Z}`})},G=e=>{v.scribe({element:"details_button",action:"click"}),e.stopPropagation(),e.preventDefault(),D(!0)},J=()=>n.createElement(S.Z,{dataSaver:!1,dominantColor:Q.rgb,mediaIndex:0,mediaItems:[V],onDismiss:X,onMediaDetailZoomed:O,onTap:B}),Y=()=>n.createElement(m.Z,{to:`/${Z}`}),ee=()=>{P(!I)},ae=e=>e?null:n.createElement(k.ZP,{accessibilityLabel:I?ea:Ye,dominantColor:Q.rgb,hoverLabel:{label:I?aa:la},icon:I?n.createElement(E.default,null):n.createElement(h.default,null),onClick:ee,type:"onMediaDominantColorFilled"}),le=e=>{var a;const l=null!=A&&null!=(a=A.legacy)&&a.profile_image_url_https?A.legacy.profile_image_url_https:void 0;return n.createElement(T.Z,{backgroundColor:Q,type.has` to recognize several different possible flag
                 * representations. `process.allowedNodeEnvironmentFlags.has()` will
                 * return `true` in the following cases:
                 *
                 * * Flags may omit leading single (`-`) or double (`--`) dashes; e.g.,`inspect-brk` for `--inspect-brk`, or `r` for `-r`.
                 * * Flags passed through to V8 (as listed in `--v8-options`) may replace
                 * one or more _non-leading_ dashes for an underscore, or vice-versa;
                 * e.g., `--perf_basic_prof`, `--perf-basic-prof`, `--perf_basic-prof`,
                 * etc.
                 * * Flags may contain one or more equals (`=`) characters; all
                 * characters after and including the first equals will be ignored;
                 * e.g., `--stack-trace-limit=100`.
                 * * Flags _must_ be allowable within `NODE_OPTIONS`.
                 *
                 * When iterating over `process.allowedNodeEnvironmentFlags`, flags will
                 * appear only _once_; each will begin with one or more dashes. Flags
                 * passed through to V8 will contain underscores instead of non-leading
                 * dashes:
                 *
                 * ```js
                 * import { allowedNodeEnvironmentFlags } from 'process';
                 *
                 * allowedNodeEnvironmentFlags.forEach((flag) => {
                 *   // -r
                 *   // --inspect-brk
                 *   // --abort_on_uncaught_exception
                 *   // ...
                 * });
                 * ```
                 *
                 * The methods `add()`, `clear()`, and `delete()` of`process.allowedNodeEnvironmentFlags` do nothing, and will fail
                 * silently.
                 *
                 * If Node.js was compiled _without_ `NODE_OPTIONS` support (shown in {@link config}), `process.allowedNodeEnvironmentFlags` will
                 * contain what _would have_ been allowable.
                 * @since v10.10.0
                 */
                allowedNodeEnvironmentFlags: ReadonlySet<string>;
                /**
                 * `process.report` is an object whose methods are used to generate diagnostic
                 * reports for the current process. Additional documentation is available in the `report documentation`.
                 * @since v11.8.0
                 */
                report?: ProcessReport | undefined;
                /**
                 * ```js
                 * import { resourceUsage } from 'process';
                 *
                 * console.log(resourceUsage());
                 * /*
                 *   Will output:
                 *   {
                 *     userCPUTime: 82872,
                 *     systemCPUTime: 4143,
                 *     maxRSS: 33164,
                 *     sharedMemorySize: 0,
                 *     unsharedDataSize: 0,
                 *     unsharedStackSize: 0,
                 *     minorPageFault: 2469,
                 *     majorPageFault: 0,
                 *     swappedOut: 0,
                 *     fsRead: 0,
                 *     fsWrite: 8,
                 *     ipcSent: 0,
                 *     ipcReceived: 0,
                 *     signalsCount: 0,
                 *     voluntaryContextSwitches: 79,
                 *     involuntaryContextSwitches: 1
                 *   }
                 *
                 * ```
                 * @since v12.6.0
                 * @return the resource usage for the current process. All of these values come from the `uv_getrusage` call which returns a [`uv_rusage_t` struct][uv_rusage_t].
                 */
                resourceUsage(): ResourceUsage;
                /**
                 * The `process.traceDeprecation` property indicates whether the`--trace-deprecation` flag is set on the current Node.js process. See the
                 * documentation for the `'warning' event` and the `emitWarning() method` for more information about this
                 * flag's behavior.
                 * @since v0.8.0
                 */
                traceDeprecation: boolean;
                /* EventEmitter */
                addListener(event: 'beforeExit', listener: BeforeExitListener): this;
                addListener(event: 'disconnect', listener: DisconnectListener): this;
                addListener(event: 'exit', listener: ExitListener): this;
                addListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;
                addListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;
                addListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;
                addListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;
                addListener(event: 'warning', listener: WarningListener): this;
                addListener(event: 'message', listener: MessageListener): this;
                addListener(event: Signals, listener: SignalsListener): this;
                addListener(event: 'multipleResolves', listener: MultipleResolveListener): this;
                addListener(event: 'worker', listener: WorkerListener): this;
                emit(event: 'beforeExit', code: number): boolean;
                emit(event: 'disconnect'): boolean;
                emit(event: 'exit', code: number): boolean;
                emit(event: 'rejectionHandled', promise: Promise<unknown>): boolean;
                emit(event: 'uncaughtException', error: Error): boolean;
                emit(event: 'uncaughtExceptionMonitor', error: Error): boolean;
                emit(event: 'unhandledRejection', reason: unknown, promise: Promise<unknown>): boolean;
                emit(event: 'warning', warning: Error): boolean;
                emit(event: 'message', message: unknown, sendHandle: unknown): this;
                emit(event: Signals, signal?: Signals): boolean;
                emit(event: 'multipleResolves', type: MultipleResolveType, promise: Promise<unknown>, value: unknown): this;
                emit(event: 'worker', listener: WorkerListener): this;
                on(event: 'beforeExit', listener: BeforeExitListener): this;
                on(event: 'disconnect', listener: DisconnectListener): this;
                on(event: 'exit', listener: ExitListener): this;
                on(event: 'rejectionHandled', listener: RejectionHandledListener): this;
                on(event: 'uncaughtException', listener: UncaughtExceptionListener): this;
                on(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;
                on(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;
                on(event: 'warning', listener: WarningListener): this;
                on(event: 'message', listener: MessageListener): this;
                on(event: Signals, listener: SignalsListener): this;
                on(event: 'multipleResolves', listener: MultipleResolveListener): this;
                on(event: 'worker', listener: WorkerListener): this;
                on(event: string | symbol, listener: (...args: any[]) => void): this;
                once(event: 'beforeExit', listener: BeforeExitListener): this;
                once(event: 'disconnect', listener: DisconnectListener): this;
                once(event: 'exit', listener: ExitListener): this;
                once(event: 'rejectionHandled', listener: RejectionHandledListener): this;
                once(event: 'uncaughtException', listener: UncaughtExceptionListener): this;
                once(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;
                once(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;
                once(event: 'warning', listener: WarningListener): this;
                once(event: 'message', listener: MessageListener): this;
                once(event: Signals, listener: SignalsListener): this;
                once(event: 'multipleResolves', listener: MultipleResolveListener): this;
                once(event: 'worker', listener: WorkerListener): this;
                once(event: string | symbol, listener: (...args: any[]) => void): this;
                prependListener(event: 'beforeExit', listener: BeforeExitListener): this;
                prependListener(event: 'disconnect', listener: DisconnectListener): this;
                prependListener(event: 'exit', listener: ExitListener): this;
                prependListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;
                prependListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;
                prependListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;
                prependListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;
                prependListener(event: 'warning', listener: WarningListener): this;
                prependListener(event: 'message', listener: MessageListener): this;
                prependListener(event: Signals, listener: SignalsListener): this;
                prependListener(event: 'multipleResolves', listener: MultipleResolveListener): this;
                prependListener(event: 'worker', listener: WorkerListener): this;
                prependOnceListener(event: 'beforeExit', listener: BeforeExitListener): this;
                prependOnceListener(event: 'disconnect', listener: DisconnectListener): this;
                prependOnceListener(event: 'exit', listener: ExitListener): this;
                prependOnceListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;
                prependOnceListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;
                prependOnceListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;
                prependOnceListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;
                prependOnceListener(event: 'warning', listener: WarningListener): this;
                prependOnceListener(event: 'message', listener: MessageListener): this;
                prependOnceListener(event: Signals, listener: SignalsListener): this;
                prependOnceListener(event: 'multipleResolves', listener: MultipleResolveListener): this;
                prependOnceListener(event: 'worker', listener: WorkerListener): this;
                listeners(event: 'beforeExit'): BeforeExitListener[];
                listeners(event: 'disconnect'): DisconnectListener[];
                listeners(event: 'exit'): ExitListener[];
                listeners(event: 'rejectionHandled'): RejectionHandledListener[];
                listeners(event: 'uncaughtException'): UncaughtExceptionListener[];
                listeners(event: 'uncaughtExceptionMonitor'): UncaughtExceptionListener[];
                listeners(event: 'unhandledRejection'): UnhandledRejectionListener[];
                listeners(event: 'warning'): WarningListener[];
                listeners(event: 'message'): MessageListener[];
                listeners(event: Signals): SignalsListener[];
                listeners(event: 'multipleResolves'): MultipleResolveListener[];
                listeners(event: 'worker'): WorkerListener[];
            }
        }
    }
    export = process;
}
declare module 'node:process' {
    import process = require('process');
    export = process;
}
