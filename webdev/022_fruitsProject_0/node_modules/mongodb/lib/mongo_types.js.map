    assert.equal(false, query.options.snapshot);
    });
    noDistinct('snapshot');
    no('count', 'snapshot');
  });

  describe('hint', function() {
    it('accepts an object', function() {
      const query2 = mquery();
      query2.hint({ a: 1, b: -1 });
      assert.deepEqual(query2.options.hint, { a: 1, b: -1 });
    });

    it('accepts a string', function() {
      const query2 = mquery();
      query2.hint('a');
      assert.deepEqual(query2.options.hint, 'a');
    });

    it('rejects everything else', function() {
      assert.throws(function() {
        mquery().hint(['c']);
      }, /Invalid hint./);
      assert.throws(function() {
        mquery().hint(1);
      }, /Invalid hint./);
    });

    describe('does not have side aff