.Z.getConstants().isRTL&&t===y.Z.ArrowLeft){const e=n?0:s.length-1;a=r===s.length-1?e:r+1}this._focusItem(a)},this._setupIntersectionObserver=()=>{window.IntersectionObserver&&(this._observer=new window.IntersectionObserver(this._handleIntersection,{root:this._list.current,rootMargin:"5px",threshold:[.5,1]}),this._observeChildRefs())},this._observeChildRefs=()=>{this._observer&&(this._observer.disconnect(),(0,u.Z)(this._childRefs).forEach((e=>{e&&this._observer.observe(e)})))},this._handleIntersection=(e,t)=>{const{children:s,onVisibleRangeChange:i}=this.props;this._handleScrollDebounce(),e.forEach((e=>{const o=Array.from(t.root.children).indexOf(e.target);0===o?this.setState({hidePrevButton:1===e.intersectionRatio}):o===s.length-1&&this.setState({hideNextButton:1===e.intersectionRatio}),-1!==o&&i&&i({index:o,intersectionRatio:e.intersectionRatio})}))},this._handleScroll=()=>{const{onScroll:e}=this.props,{swipeableWidth:t}=this.state;if(e&&t){const s=this._getLeftOffset(t);e({previous:this._scrollLeft,next:s}),this._scrollLeft=s}},this._handleScrollDebounce=(0,h.Z)(this._handleScroll,500),this._goToOffset=e=>{const{isLocked:t}=this.props;if(t)return;const s=this._list.current;if(s instanceof window.HTMLElement)if(o.Z.getConstants().isRTL)if(L())this._scrollToOffset(-e);else{const t=s.scrollWidth-(this.state.swipeableWidth||0);this._scrollToOffset(t-e)}else this._scrollToOffset(e);else this._scrollToOffset(e)},this._scrollToOffset=(e,t)=>{const s=this._list.current;s&&s.scrollTo&&s.scrollTo({left:e,behavior:this._getScrollBehavior(t)})},this._getLeftOffset=e=>{const t=this._list.current,s=t?t.scrollLeft:0,i=t?t.scrollWidth:0;let n=0;return n=o.Z.getConstants().isRTL?L()&&o.Z.getConstants().isRTL?-1*Math.min(0,s):-1*Math.min(0,s-(i-e)):s,Math.ceil(n)},this._goToPreviousPage=()=>{const{swipeableWidth:e=0}=this.state;this._goToOffset(this._getLeftOffset(e)-e)},this._goToNextPage=()=>{const{swipeableWidth:e=0}=this.state;this._goToOffset(this._getLeftOffset(e)+e)}}componentDidMount(){const{visibleItemIndex:e,withGlobalKeyboardNavigation:t}=this.props;e&&this._goToInitialItem(e),t&&window.document.addEventListener("keydown",this._handleKeyDown),this._setupIntersectionObserver()}componentDidUpdate(e,t){this.props.updateObserverWithChildren&&e.children.length!==this.props.children.length&&this._observeChildRefs(),this._handleSelectedItemChange(e),void 0!==this.props.swipeablePaddingLeft&&void 0!==this.props.swipeablePaddingRight&&this._list.current&&this._list.current.setNativeProps?this._list.current.setNativeProps({style:{scrollPaddi