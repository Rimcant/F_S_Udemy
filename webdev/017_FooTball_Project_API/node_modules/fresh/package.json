0) === "$")
      return true;
  }
  return false;
};
const createNestedOperation = (
  keyPath: Key[],
  nestedQuery: any,
  parentKey: string,
  owneryQuery: any,
  options: Options
) => {
  if (containsOperation(nestedQuery, options)) {
    const [selfOperations, nestedOperations] = createQueryOperations(
      nestedQuery,
      parentKey,
      options
    );
    if (nestedOperations.length) {
      throw new Error(
        `Property queries must contain only operations, or exact objects.`
      );
    }
    return new NestedOperation(
      keyPath,
      nestedQuery,
      owneryQuery,
      options,
      selfOperations
    );
  }
  return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, [
    new EqualsOperation(nestedQuery, owneryQuery, options)
  ]);
};

export const createQueryOperation = <TItem, TSchema = TItem>(
  query: Query<TSchema>,
  owneryQuery: any = null,
  { compare, operations }: Partial<Options> = {}
): QueryOperation<TItem> => {
  const options = {
    compare: compare || equals,
    operations: Object.assign({}, operations || {})
  };

  const [selfOperations, nestedOperations] = createQueryOperations(
    query,
    null,
    options
  );

  const ops = [];

  if (selfOperations.length) {
    ops.push(
      new NestedOperation([], query, owneryQuery, options, selfOperations)
    );
  }

  ops.push(...nestedOperations);

  if (ops.length 