terface AbsoluteLocation {
  priority?: Priority;
}
export declare type Relation = "before" | "after";
export interface RelativeLocation {
  relation: Relation;
  toMiddleware: string;
}
export declare type RelativeMiddlewareOptions = RelativeLocation &
  Pick<HandlerOptions, Exclude<keyof HandlerOptions, "step">>;
export interface InitializeHandlerOptions extends HandlerOptions {
  step?: "initialize";
}
export interface SerializeHandlerOptions extends HandlerOptions {
  step: "serialize";
}
export interface BuildHandlerOptions extends HandlerOptions {
  step: "build";
}
export interface FinalizeRequestHandlerOptions extends HandlerOptions {
  step: "finalizeRequest";
}
export interface DeserializeHandlerOptions extends HandlerOptions {
  step: "deserialize";
}
export interface MiddlewareStack<Input extends object, Output extends object>
  extends Pluggable<Input, Output> {
  add(
    middleware: InitializeMiddleware<Input, Output>,
    options?: InitializeHandlerOptions & AbsoluteLocation
  ): void;
  add(
    middleware: SerializeMiddleware<Input, Output>,
    options: SerializeHandlerOptions & AbsoluteLocation
  ): void;
  add(
    middleware: BuildMiddleware<Input, Output>,
    options: BuildHandlerOptions & AbsoluteLocation
  ): void;
  add(
    middleware: FinalizeRequestMiddleware<Input, Output>,
    options: FinalizeRequestHandlerOptions & AbsoluteLocation
  ): void;
  add(
    middleware: DeserializeMiddleware<Input, Output>,
    options: DeserializeHandlerOptions & AbsoluteLocatio