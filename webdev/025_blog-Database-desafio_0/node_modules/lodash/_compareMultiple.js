/**
 * Give an input string, strictly parses a boolean value.
 *
 * @param value The boolean string to parse.
 * @returns true for "true", false for "false", otherwise an error is thrown.
 */
export declare const parseBoolean: (value: string) => boolean;
/**
 * Asserts a value is a boolean and returns it.
 * Casts strings and numbers with a warning if there is evidence that they were
 * intended to be booleans.
 *
 * @param value A value that is expected to be a boolean.
 * @returns The value if it's a boolean, undefined if it's null/undefined,
 *   otherwise an error is thrown.
 */
export declare const expectBoolean: (value: any) => boolean | undefined;
/**
 * Asserts a value is a number and returns it.
 * Casts strings with a warning if the string is a parseable number.
 * This is to unblock slight API definition/implementation inconsistencies.
 *
 * @param value A value that is expected to be a number.
 * @returns The value if it's a number, undefined if it's null/undefined,
 *   otherwise an error is thrown.
 */
export declare const expectNumber: (value: any) => number | undefined;
/**
 * Asserts a value is a 32-bit float and returns it.
 *
 * @param value A value that is expected to be a 32-bit float.
 * @returns The value if it's a float, undefined if it's null/undefined,
 *   otherwise an error is thrown.
 */
export declare const expectFloat32: (value: any) => number | undefined;
/**
 * Asserts a value is an integer and returns it.
 *
 * @param value A value that is expected to be an integer.
 * @returns The value if it's an integer, undefined if it's null/undefined,
 *   otherwise an error is thrown.
 */
exp