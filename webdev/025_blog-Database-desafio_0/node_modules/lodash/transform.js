eMatchType["EQUALS"] = "Equals";
    MappingRuleMatchType["NOT_EQUAL"] = "NotEqual";
    MappingRuleMatchType["STARTS_WITH"] = "StartsWith";
})(MappingRuleMatchType = exports.MappingRuleMatchType || (exports.MappingRuleMatchType = {}));
var RoleMappingType;
(function (RoleMappingType) {
    RoleMappingType["RULES"] = "Rules";
    RoleMappingType["TOKEN"] = "Token";
})(RoleMappingType = exports.RoleMappingType || (exports.RoleMappingType = {}));
class DeveloperUserAlreadyRegisteredException extends CognitoIdentityServiceException_1.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "DeveloperUserAlreadyRegisteredException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeveloperUserAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeveloperUserAlreadyRegisteredException.prototype);
    }
}
exports.DeveloperUserAlreadyRegisteredException = DeveloperUserAlreadyRegisteredException;
class ConcurrentModificationException extends CognitoIdentityServiceException_1.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
exports.ConcurrentModificationException = ConcurrentModificationException;
const CognitoIdentityProviderFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CognitoIdentityProviderFilterSensitiveLog = CognitoIdentityProviderFilterSensitiveLog;
const CreateIdentityPoolInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateIdentityPoolInputFilterSensitiveLog = CreateIdentityPoolInputFilterSensitiveLog;
const IdentityPoolFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.IdentityPoolFilterSensitiveLog = IdentityPoolFilterSensitiveLog;
const DeleteIdentitiesInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteIdentitiesInputFilterSensitiveLog = DeleteIdentitiesInputFilterSensitiveLog;
const UnprocessedIdentityIdFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UnprocessedIdentityIdFilterSensitiveLog = UnprocessedIdentityIdFilterSe