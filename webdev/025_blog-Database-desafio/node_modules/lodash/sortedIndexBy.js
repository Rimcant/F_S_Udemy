    composed?: boolean;
}

interface EventListenerOptions {
    /** Not directly used by Node.js. Added for API completeness. Default: `false`. */
    capture?: boolean;
}

interface AddEventListenerOptions extends EventListenerOptions {
    /** When `true`, the listener is automatically removed when it is first invoked. Default: `false`. */
    once?: boolean;
    /** When `true`, serves as a hint that the listener will not call the `Event` object's `preventDefault()` method. Default: false. */
    passive?: boolean;
}

interface EventListener {
    (evt: Event): void;
}

interface EventListenerObject {
    handleEvent(object: Event): void;
}

import {} from 'events';    // Make this an ambient declaration
declare global {
    /** An event which takes place in the DOM. */
    interface Event extends __Event {}
    var Event: typeof globalThis extends { onmessage: any, Event: infer T }
        ? T
        : {
            prototype: __Event;
            new (type: string, eventInitDict?: EventInit): __Event;
        };

    /**
     * EventTarget is a DOM interface implemented 