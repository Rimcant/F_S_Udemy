ith exactly one non-null,
 *              non-undefined key.
 * @return the value if it's a union, undefined if it's null/undefined, otherwise
 *  an error is thrown.
 */
export declare const expectUnion: (value: unknown) => Record<string, any> | undefined;
/**
 * Parses a value into a double. If the value is null or undefined, undefined
 * will be returned. If the value is a string, it will be parsed by the standard
 * parseFloat with one exception: NaN may only be explicitly set as the string
 * "NaN", any implicit Nan values will result in an error being thrown. If any
 * other type is provided, an exception will be thrown.
 *
 * @param value A number or string representation of a double.
 * @returns The value as a number, or undefined if it's null/undefined.
 */
export declare const strictParseDouble: (value: string | number) => number | undefined;
/**
 * @deprecated Use strictParseDouble
 */
export declare const strictParseFloat: (value: string | number) => number | undefined;
/**
 * Parses a value into a float. If the value is null or undefined, undefined
 * will be returned. If the valu